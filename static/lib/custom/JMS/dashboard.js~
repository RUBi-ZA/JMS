var Node = function(name, state, num_cores, busy_cores, jobs) {
	this.Name = ko.observable(name);
	this.State = ko.observable(state);
	this.NumCores = ko.observable(num_cores);
	this.BusyCores = ko.observable(busy_cores);
	this.FreeCores = ko.observable(num_cores - busy_cores);
	this.Jobs = ko.observableArray(jobs);
}

var NodeJob = function(job_id, cores){
	this.JobID = ko.observable(job_id);
	this.Cores = ko.observableArray(cores);
}

var Job = function(job_id, username, job_name, nodes, cores, state, time, queue, server, resources){
	this.JobID = ko.observable(job_id);
	this.Username = ko.observable(username);
	this.JobName = ko.observable(job_name);
	this.Nodes = ko.observable(nodes);
	this.Cores = ko.observable(cores);
	this.State = ko.observable(state);
	this.Time = ko.observable(time);
	this.Queue = ko.observable(queue);
}

var Resource = function(resource, allocated) {
	this.ResourceName = ko.observable(resource)
	this.ResourcesAllocated = ko.observable(allocated)
}

var DiskUsage = function(disk_size, available_space, used_space){
	this.DiskSize = ko.observable(disk_size);
	this.AvailableSpace = ko.observable(available_space);
	this.UsedSpace = ko.observable(used_space);
}

function DashboardViewModel() {		
	var self = this;
	
	//Visibility
	self.VisibleWindow = ko.observable("loading");
	self.Loading = ko.observable(true);
	
	//Filters			
	self.QueueFilter = ko.observable("david");
	self.NodeJobFilter = ko.observable("");
	
	//Data
	self.Nodes = ko.observableArray(null);
	self.Queue = ko.observableArray(null);
		
		//summary data	
		self.NodesOnline = ko.observable(0);
	
		self.NumCores = ko.observable(0);	
		self.BusyCores = ko.observable(0);
	
		self.JobsRunning = ko.observable(0);
		self.JobsWaiting = ko.observable(0);
	
		self.DiskUsage = ko.observable(new DiskUsage());
		
		//nodes graph data
		self.nodes_data = [];	
	
		//selected data
		self.Node = ko.observable(new Node("", "", 64, 0, []));
		self.selected_node_index = 0;
		self.Job = ko.observable();
		
	self.LoadDashboard = function() {
		$.ajax({
			url: "/api/jms/dashboard",
			success: function(json) {
				var data = JSON.parse(json);
				
				self.DiskUsage(new DiskUsage(data.disk.disk_size, 
					data.disk.available_space, data.disk.used_space));
				
				//Load queue
				jobs_running = 0;
				jobs_waiting = 0;
				
				var queue = []
				$.each(data.queue, function(index, q) {
					var j = new Job(q.job_id, q.username, 
						q.job_name, q.nodes, q.cores, q.state, 
						q.time, q.queue);
										
					queue.push(j);	
					
					if(q.state == "R")
						jobs_running++;
					else if(q.state == "Q" || q.state == "H")
						jobs_waiting++;			
				});				
				
				self.Queue(queue);				
				
				self.JobsRunning(jobs_running);
				self.JobsWaiting(jobs_waiting);
				
				//Load nodes
				self.nodes_data = [];
				
				self.NodesOnline(0);
				self.NumCores(0);	
				self.BusyCores(0);
					
				self.Nodes([]);
									
				$.each(data.nodes, function(i, node) {
					var n = new Node(node.name, node.state, 
						node.num_cores, node.busy_cores, 
						[]);
					
					$.each(node.jobs, function(j, job){
						n.Jobs().push(new NodeJob(job.job_id, job.cores));
					});
					
					self.Nodes.push(n);
					
					//data for morris chart
					self.nodes_data.push({ label: node.name, value: node.busy_cores });
					
					if(node.state != "down") {
						self.NodesOnline(self.NodesOnline() + 1);
					}
					
					self.NumCores(self.NumCores() + node.num_cores);	
					self.BusyCores(self.BusyCores() + node.busy_cores);
				});				
									
		        self.Node(self.Nodes()[self.selected_node_index]);
		
				self.VisibleWindow("dashboard");
				
				self.Loading(false);
		        
		        //Draw donut chart if there are busy nodes
		        if(self.BusyCores() > 0) {
					chart = Morris.Donut({
						element: 'node-usage-chart',
						data: self.nodes_data,
						resize: true,
					});
							
					chart.on('click', function(i, node){
						self.selected_node_index = i;
						self.Node(self.Nodes()[i]);
					});		
				}
			},
			error: function() {					
				self.Loading(false);	
			}
		});		
	}
	
	self.FilterQueue = function(job) {
		if(self.QueueFilter().length > 0) {
			if(job.JobID().indexOf(self.QueueFilter()) >= 0) {
			   	return true;
		    } else if(job.JobName().indexOf(self.QueueFilter()) >= 0) {
			   	return true;
		    } else if(job.Username().indexOf(self.QueueFilter()) >= 0) {
			   	return true;
		    } else if(job.State() == self.QueueFilter()) {
			   	return true;
		    }    
		    
		    return false;
        }                
        return true;
	}
	
	self.FilterNodeJob = function(job) {
		if(self.NodeJobFilter().length > 0) {
			if(job.JobID().indexOf(self.NodeJobFilter()) >= 0) {
			   	return true;
		    }    
		    
		    return false;
        }                
        return true;
	}
	
	self.StopJob = function(job_id) {
		$("#n_" + job_id.replace('.', '_') + " > i").hide();
		$("#n_" + job_id.replace('.', '_') + " > img").show();
		
		$("#q_" + job_id.replace('.', '_') + " > i").hide();
		$("#q_" + job_id.replace('.', '_') + " > img").show();
			
		$.ajax({
			url: "/api/jms/jobs/cluster/" + job_id,
			type: "DELETE",
			success: function() {
				self.LoadDashboard();
			},
			error: function(jqXHR) {
				var header = $("#modal-dialog > div.modal-dialog > div.modal-content > div.modal-header > h4.modal-title");
				var body = $("#modal-dialog > div.modal-dialog > div.modal-content > div.modal-body");
					
				header.html('<span class="icon-box bg-color-red"><i class="fa fa-warning"></i></span> ');
				if(jqXHR.status == 400) {
					header.append("Error: Bad request");
					body.text("Attempt to stop the job failed. The job may have already stopped.");
				} else if (jqXHR.status == 403) {
					header.append("Error: Permission denied");
					body.text("You do not have permission to stop this job. Either the job was created by another user or your password on the server has changed. Try log in again.");
				} else if (jqXHR.status == 404) {
					header.append("Error: Job not found");
					body.text("The job you tried to stop no longer exists on the server.");
				} else if (jqXHR.status == 500) {
					header.append("Error: Internal server error");
					body.text("Something went wrong on the server. Please try again. If the problem persists, contact an administrator.");
				} else {
					header.append("Error: HTTP status code " + jqXHR.status);
					body.text("Something went wrong on the server. Please try again. If the problem persists, contact an administrator.");
				}
					
				$("#modal-dialog").modal();
				
				$("#n_" + job_id + " > img").hide();
				$("#n_" + job_id + " > i").show();
				
				$("#q_" + job_id + " > img").hide();
				$("#q_" + job_id + " > i").show();
			}
		});
	}
			
	self.ViewDashboard = function() {		
		self.LoadDashboard();
		
		clearInterval(interval);		
		interval = setInterval(self.LoadDashboard, 10000);
		
		self.VisibleWindow("dashboard");
	}
}

var dashboard = new DashboardViewModel();
ko.applyBindings(dashboard, document.getElementById("page-wrapper"));

dashboard.LoadDashboard();
var interval = setInterval(dashboard.LoadDashboard, 10000);

